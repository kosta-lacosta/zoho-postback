import express from 'express';
import axios from 'axios';

const app = express();
const port = process.env.PORT || 3000;

// –ü–æ–ª—É—á–µ–Ω–∏–µ Zoho access_token
async function getAccessToken() {
  try {
    const params = new URLSearchParams();
    params.append('client_id', '1000.PMKVL76WC40TDI4LS9Q0MOCRGIPE0A');
    params.append('client_secret', '225bac66c839b4b48df2c5b63552bc6e37108f76bb');
    params.append('grant_type', 'refresh_token');
    params.append('refresh_token', '1000.533a83031fea26bb4d0470e51f023930.ff8ded7294143ff9f17ff71c9c740dae');

    const response = await axios.post(
      'https://accounts.zoho.eu/oauth/v2/token',
      params.toString(),
      {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      }
    );

    return response.data.access_token;
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + (error?.response?.data?.error || error.message));
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–∞ –ø–æ click_id –∏–ª–∏ email
async function findLead(clickId, email, headers) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ click_id
    if (clickId) {
      const leadResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Leads/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (leadResp.data?.data?.[0]) {
        return leadResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ click_id, –∏—â–µ–º –ø–æ email
    if (email) {
      const leadResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Leads/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (leadResp.data?.data?.[0]) {
        return leadResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–∞:', error?.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ click_id –∏–ª–∏ email
async function findContact(clickId, email, headers) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ click_id
    if (clickId) {
      const contactResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Contacts/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (contactResp.data?.data?.[0]) {
        return contactResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ click_id, –∏—â–µ–º –ø–æ email
    if (email) {
      const contactResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Contacts/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (contactResp.data?.data?.[0]) {
        return contactResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error?.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –∏–ª–∏ –ª–∏–¥—É
async function findDeal(contactId, clickId, email, headers) {
  try {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –∏—â–µ–º –ø–æ Contact_Name
    if (contactId) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(Contact_Name:equals:${contactId})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∏—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ click_id
    if (clickId) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –∏ –ø–æ click_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ø–æ email
    if (email) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏:', error?.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
function isValidEmail(email) {
  if (!email || typeof email !== 'string') return false;
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email) && email.length >= 5;
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function generateContactName(lead, clickId) {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Last_Name > First_Name > —á–∞—Å—Ç—å email > click_id
  if (lead.Last_Name && lead.Last_Name.trim() && lead.Last_Name !== lead.Email) {
    return lead.Last_Name.trim();
  }
  if (lead.First_Name && lead.First_Name.trim()) {
    return lead.First_Name.trim();
  }
  
  // –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π email - –±–µ—Ä–µ–º —á–∞—Å—Ç—å –¥–æ @
  if (lead.Email && isValidEmail(lead.Email)) {
    const emailPart = lead.Email.split('@')[0];
    if (emailPart && emailPart.length > 0) {
      return emailPart;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º click_id –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (clickId && clickId.toString().trim()) {
    return `Contact_${clickId}`;
  }
  
  return 'Unknown Contact';
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
function validateConversionData(lead, clickId) {
  const errors = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const contactName = generateContactName(lead, clickId);
  if (!contactName || contactName.length < 2) {
    errors.push('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º email –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (lead.Email && !isValidEmail(lead.Email)) {
    errors.push(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email: ${lead.Email}`);
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    contactName
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Alanbase –ø–æ—Å—Ç–±—ç–∫–æ–≤
app.get('/api/alanbase', async (req, res) => {
  const {
    id,
    status,
    value,
    amount,
    goal,
    currency,
    custom1,
    const2,
    sub_id1,
    type: rawType
  } = req.query;

  const clickId = id || custom1 || sub_id1;
  const email = const2;
  const typeMap = {
    reg: 'registration',
    dep: 'deposit',
    red: 'redeposit',
    wd: 'withdrawal'
  };

  const type = typeMap[rawType || goal] || 'unknown';

  if (!clickId && !email) {
    return res.status(400).json({ 
      success: false, 
      error: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –ª–∏–±–æ click_id (id/custom1/sub_id1), –ª–∏–±–æ email (const2)' 
    });
  }

  try {
    const token = await getAccessToken();
    const headers = { Authorization: `Zoho-oauthtoken ${token}` };

    // üîµ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if (type === 'registration') {
      const lead = await findLead(clickId, email, headers);

      if (lead) {
        const updateResp = await axios.put(
          'https://www.zohoapis.eu/crm/v2/Leads',
          {
            data: [{ id: lead.id, Status: 'Registered' }]
          },
          { headers }
        );
        return res.json({ success: true, updated: updateResp.data });
      } else {
        const createResp = await axios.post(
          'https://www.zohoapis.eu/crm/v2/Leads',
          {
            data: [{
              Last_Name: email || `Reg ${clickId}`,
              click_id_Alanbase: clickId,
              amount: amount || value || 0,
              Status: 'Registered',
              Currency: currency,
              type: 'registration',
              Email: email
            }]
          },
          { headers }
        );
        return res.json({ success: true, created: createResp.data });
      }
    }

    // üü¢ –î–µ–ø–æ–∑–∏—Ç
    if (type === 'deposit') {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–∏–¥ –ø–æ click_id –∏–ª–∏ email
      const lead = await findLead(clickId, email, headers);
      
      if (lead) {
        console.log('–ù–∞–π–¥–µ–Ω –ª–∏–¥ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞:', {
          id: lead.id,
          Last_Name: lead.Last_Name,
          First_Name: lead.First_Name,
          Email: lead.Email,
          click_id_Alanbase: lead.click_id_Alanbase,
          Status: lead.Status
        });

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        const validation = validateConversionData(lead, clickId);
        if (!validation.isValid) {
          console.error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', validation.errors);
          throw new Error(`–î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${validation.errors.join(', ')}`);
        }

        // –ï—Å–ª–∏ –ª–∏–¥ –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—Ç–∞–¥–∏—é FTD
        await axios.put(
          'https://www.zohoapis.eu/crm/v2/Leads',
          {
            data: [{ id: lead.id, Status: 'FTD' }]
          },
          { headers }
        );
        
        // –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –õ–ò–î –í –ö–û–ù–¢–ê–ö–¢ –ò –°–î–ï–õ–ö–£
        console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–∏–¥:', lead.id);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        const contactName = validation.contactName;
        
        const convertData = {
          overwrite: true,
          notify_lead_owner: false,
          notify_new_entity_owner: false,
          Contacts: {
            Last_Name: contactName
          },
          Deals: {
            Deal_Name: `Retention Deal ${contactName}`,
            Stage: '0. FIRST DEPOSIT'
          }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º email —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
        if (lead.Email && isValidEmail(lead.Email)) {
          convertData.Contacts.Email = lead.Email;
          convertData.Deals.Email = lead.Email;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º click_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–Ω—ã–π
        if (clickId && clickId.toString().trim() && clickId.toString().length > 0) {
          convertData.Contacts.click_id_Alanbase = clickId.toString();
          convertData.Deals.click_id_Alanbase = clickId.toString();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –≤ —Å–¥–µ–ª–∫—É
        const depositAmount = Number(amount || value || 0);
        if (depositAmount > 0) {
          convertData.Deals.Amount = depositAmount;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
        if (currency && currency.trim()) {
          convertData.Deals.Currency = currency.trim();
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', JSON.stringify(convertData, null, 2));

        try {
          const convertResp = await axios.post(
            `https://www.zohoapis.eu/crm/v2/Leads/${lead.id}/actions/convert`,
            {
              data: [convertData]
            },
            { headers }
          );

          console.log('Convert API Response:', JSON.stringify(convertResp.data, null, 2));

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
          if (convertResp.data?.data?.[0]?.status === 'error') {
            const errorDetails = convertResp.data.data[0];
            console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', errorDetails);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            console.error('–î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–ª–∏ –∫ –æ—à–∏–±–∫–µ:', {
              leadId: lead.id,
              leadData: lead,
              convertData: convertData
            });
            
            throw new Error(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª–∏–¥–∞: ${errorDetails.message} (${errorDetails.code})`);
          }

          if (!convertResp.data?.data?.[0]) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–¥ - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
          }

          const convertedData = convertResp.data.data[0];
          
          let contactId, retentionId;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
          if (convertedData.details) {
            contactId = convertedData.details.Contacts?.id || convertedData.details.Contacts;
            retentionId = convertedData.details.Deals?.id || convertedData.details.Deals;
          } else if (convertedData.Contacts || convertedData.Deals) {
            contactId = convertedData.Contacts?.id || convertedData.Contacts;
            retentionId = convertedData.Deals?.id || convertedData.Deals;
          } else if (convertedData.message && convertedData.message === 'success') {
            console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏...');
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ Zoho
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ email –∏–ª–∏ click_id
            const createdContact = await findContact(clickId, email, headers);
            if (createdContact) {
              contactId = createdContact.id;
              console.log('–ù–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:', contactId);
            }
            
            // –ò—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
            if (contactId) {
              const createdDeal = await findDeal(contactId, clickId, email, headers);
              if (createdDeal) {
                retentionId = createdDeal.id;
                console.log('–ù–∞–π–¥–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞:', retentionId);
              }
            }
          }

          if (!contactId || !retentionId) {
            console.error('–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', JSON.stringify(convertResp.data, null, 2));
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
          }
          
          console.log('–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', {
            leadId: lead.id,
            contactId,
            dealId: retentionId
          });

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–µ–ø–æ–∑–∏—Ç–∞
          try {
            const depositData = {
              Name: `–î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${depositAmount}`,
              amount: depositAmount,
              contact: contactId,
              Retention: retentionId
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if (currency && currency.trim()) {
              depositData.Currency = currency.trim();
            }

            // –î–æ–±–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π
            if (lead.Email && isValidEmail(lead.Email)) {
              depositData.Email = lead.Email;
            }

            const depositResp = await axios.post(
              'https://www.zohoapis.eu/crm/v2/deposits',
              { data: [depositData] },
              { headers }
            );

            return res.json({ 
              success: true, 
              leadUpdated: true,
              converted: true,
              contactId: contactId,
              dealId: retentionId,
              deposit: depositResp.data 
            });
          } catch (depositError) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', depositError?.response?.data || depositError.message);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
            return res.json({ 
              success: true, 
              leadUpdated: true,
              converted: true,
              contactId: contactId,
              dealId: retentionId,
              depositError: depositError?.response?.data || depositError.message
            });
          }

        } catch (convertError) {
          console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª–∏–¥–∞:', convertError?.response?.data || convertError.message);
          
          // –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤—Ä—É—á–Ω—É—é
          console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤—Ä—É—á–Ω—É—é...');
          
          try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const contactCreateData = {
              Last_Name: contactName
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã
            if (lead.Email && isValidEmail(lead.Email)) {
              contactCreateData.Email = lead.Email;
            }
            
            if (lead.First_Name && lead.First_Name.trim()) {
              contactCreateData.First_Name = lead.First_Name.trim();
            }
            
            if (clickId && clickId.toString().trim()) {
              contactCreateData.click_id_Alanbase = clickId.toString();
            }

            console.log('–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏:', contactCreateData);

            const contactCreateResp = await axios.post(
              'https://www.zohoapis.eu/crm/v2/Contacts',
              { data: [contactCreateData] },
              { headers }
            );

            let contactId;
            if (contactCreateResp.data?.data?.[0]?.details?.id) {
              contactId = contactCreateResp.data.data[0].details.id;
              console.log('–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', contactId);
            } else {
              console.error('–û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', JSON.stringify(contactCreateResp.data, null, 2));
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç');
            }

            // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
            const dealCreateData = {
              Deal_Name: `Retention Deal ${contactName}`,
              Stage: '0. FIRST DEPOSIT',
              Contact_Name: contactId
            };

            const depositAmount = Number(amount || value || 0);
            if (depositAmount > 0) {
              dealCreateData.Amount = depositAmount;
            }

            if (clickId && clickId.toString().trim()) {
              dealCreateData.click_id_Alanbase = clickId.toString();
            }
            
            if (lead.Email && isValidEmail(lead.Email)) {
              dealCreateData.Email = lead.Email;
            }
            
            if (currency && currency.trim()) {
              dealCreateData.Currency = currency.trim();
            }

            console.log('–°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏:', dealCreateData);

            const dealCreateResp = await axios.post(
              'https://www.zohoapis.eu/crm/v2/Deals',
              { data: [dealCreateData] },
              { headers }
            );

            let retentionId;
            if (dealCreateResp.data?.data?.[0]?.details?.id) {
              retentionId = dealCreateResp.data.data[0].details.id;
              console.log('–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', retentionId);
            } else {
              console.error('–û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', JSON.stringify(dealCreateResp.data, null, 2));
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É');
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–µ–ø–æ–∑–∏—Ç–∞
            const depositData = {
              Name: `–î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${depositAmount}`,
              amount: depositAmount,
              contact: contactId,
              Retention: retentionId
            };

            if (currency && currency.trim()) {
              depositData.Currency = currency.trim();
            }

            if (lead.Email && isValidEmail(lead.Email)) {
              depositData.Email = lead.Email;
            }

            const depositResp = await axios.post(
              'https://www.zohoapis.eu/crm/v2/deposits',
              { data: [depositData] },
              { headers }
            );

            return res.json({ 
              success: true, 
              leadUpdated: true,
              converted: false,
              manuallyCreated: true,
              contactId: contactId,
              dealId: retentionId,
              deposit: depositResp.data 
            });

          } catch (manualError) {
            console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', manualError?.response?.data || manualError.message);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é, –Ω–∏ –≤—Ä—É—á–Ω—É—é: ${manualError.message}`);
          }
        }
        
      } else {
        // –ï—Å–ª–∏ –ª–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É
        const contact = await findContact(clickId, email, headers);
        if (!contact) {
          throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ª–∏–¥, –Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ click_id –∏–ª–∏ email');
        }

        // –ò—â–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        const deal = await findDeal(contact.id, clickId, email, headers);
        if (!deal) {
          throw new Error('Retention-—Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
        }

        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
        const depositAmount = Number(amount || value || 0);
        const depositData = {
          Name: `–î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${depositAmount}`,
          amount: depositAmount,
          contact: contact.id,
          Retention: deal.id
        };

        if (currency && currency.trim()) {
          depositData.Currency = currency.trim();
        }

        if (email && isValidEmail(email)) {
          depositData.Email = email;
        }

        const depositResp = await axios.post(
          'https://www.zohoapis.eu/crm/v2/deposits',
          { data: [depositData] },
          { headers }
        );

        return res.json({ 
          success: true, 
          deposit: depositResp.data 
        });
      }
    }

    // üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    if (type === 'redeposit') {
      // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ click_id –∏–ª–∏ email
      const contact = await findContact(clickId, email, headers);
      if (!contact) {
        throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ click_id, –Ω–∏ –ø–æ email');
      }

      // –ò—â–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const deal = await findDeal(contact.id, clickId, email, headers);
      if (!deal) {
        throw new Error('Retention-—Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
      }

      const depositResp = await axios.post(
        'https://www.zohoapis.eu/crm/v2/deposits',
        {
          data: [{
            Name: `–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${amount || value}`,
            amount: amount || value,
            contact: contact.id,
            Retention: deal.id,
            Currency: currency,
            Email: email
          }]
        },
        { headers }
      );

      return res.json({ success: true, deposit: depositResp.data });
    }

    // üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    if (type === 'withdrawal') {
      // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ click_id –∏–ª–∏ email
      const contact = await findContact(clickId, email, headers);
      if (!contact) {
        throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ click_id, –Ω–∏ –ø–æ email');
      }

      // –ò—â–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const deal = await findDeal(contact.id, clickId, email, headers);
      if (!deal) {
        throw new Error('Retention-—Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
      }

      const withdrawalResp = await axios.post(
        'https://www.zohoapis.eu/crm/v2/withdrawals',
        {
          data: [{
            Name: `–í—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É ${amount || value}`,
            amount: amount || value,
            contact: contact.id,
            Retention: deal.id,
            Currency: currency,
            Email: email
          }]
        },
        { headers }
      );

      return res.json({ success: true, withdrawal: withdrawalResp.data });
    }

    // ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
    return res.status(400).json({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error?.response?.data || error.message);
    return res.status(500).json({ 
      success: false, 
      error: error?.response?.data || error.message,
      details: error.message 
    });
  }
});

app.listen(port, () => {
  console.log(`‚úÖ Server running on port ${port}`);
});
