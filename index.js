import express from 'express';
import axios from 'axios';

const app = express();
const port = process.env.PORT || 3000;

// –ü–æ–ª—É—á–µ–Ω–∏–µ Zoho access_token
async function getAccessToken() {
  try {
    const params = new URLSearchParams();
    params.append('client_id', '1000.PMKVL76WC40TDI4LS9Q0MOCRGIPE0A');
    params.append('client_secret', '225bac66c839b4b48df2c5b63552bc6e37108f76bb');
    params.append('grant_type', 'refresh_token');
    params.append('refresh_token', '1000.533a83031fea26bb4d0470e51f023930.ff8ded7294143ff9f17ff71c9c740dae');

    const response = await axios.post(
      'https://accounts.zoho.eu/oauth/v2/token',
      params.toString(),
      {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      }
    );

    return response.data.access_token;
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + (error?.response?.data?.error || error.message));
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–∞ –ø–æ click_id –∏–ª–∏ email
async function findLead(clickId, email, headers) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ click_id
    if (clickId) {
      const leadResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Leads/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (leadResp.data?.data?.[0]) {
        return leadResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ click_id, –∏—â–µ–º –ø–æ email
    if (email) {
      const leadResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Leads/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (leadResp.data?.data?.[0]) {
        return leadResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–∞:', error?.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ click_id –∏–ª–∏ email
async function findContact(clickId, email, headers) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ click_id
    if (clickId) {
      const contactResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Contacts/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (contactResp.data?.data?.[0]) {
        return contactResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ click_id, –∏—â–µ–º –ø–æ email
    if (email) {
      const contactResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Contacts/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (contactResp.data?.data?.[0]) {
        return contactResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error?.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –∏–ª–∏ –ª–∏–¥—É
async function findDeal(contactId, clickId, email, headers) {
  try {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –∏—â–µ–º –ø–æ Contact_Name
    if (contactId) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(Contact_Name:equals:${contactId})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∏—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ click_id
    if (clickId) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –∏ –ø–æ click_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ø–æ email
    if (email) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏:', error?.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
function isValidEmail(email) {
  if (!email || typeof email !== 'string') return false;
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email) && email.length >= 5;
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function generateContactName(lead, clickId) {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Last_Name > First_Name > —á–∞—Å—Ç—å email > click_id
  if (lead.Last_Name && lead.Last_Name.trim() && lead.Last_Name !== lead.Email) {
    return lead.Last_Name.trim();
  }
  if (lead.First_Name && lead.First_Name.trim()) {
    return lead.First_Name.trim();
  }
  
  // –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π email - –±–µ—Ä–µ–º —á–∞—Å—Ç—å –¥–æ @
  if (lead.Email && isValidEmail(lead.Email)) {
    const emailPart = lead.Email.split('@')[0];
    if (emailPart && emailPart.length > 0) {
      return emailPart;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º click_id –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (clickId && clickId.toString().trim()) {
    return `Contact_${clickId}`;
  }
  
  return 'Unknown Contact';
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
function validateConversionData(lead, clickId) {
  const errors = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const contactName = generateContactName(lead, clickId);
  if (!contactName || contactName.length < 2) {
    errors.push('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º email –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (lead.Email && !isValidEmail(lead.Email)) {
    errors.push(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email: ${lead.Email}`);
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    contactName
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Alanbase –ø–æ—Å—Ç–±—ç–∫–æ–≤
app.get('/api/alanbase', async (req, res) => {
  const {
    id,
    status,
    value,
    amount,
    goal,
    currency,
    custom1,
    const2,
    sub_id1,
    type: rawType
  } = req.query;

  const clickId = id || custom1 || sub_id1;
  const email = const2;
  const typeMap = {
    reg: 'registration',
    dep: 'deposit',
    red: 'redeposit',
    wd: 'withdrawal'
  };

  const type = typeMap[rawType || goal] || 'unknown';

  if (!clickId && !email) {
    return res.status(400).json({ 
      success: false, 
      error: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –ª–∏–±–æ click_id (id/custom1/sub_id1), –ª–∏–±–æ email (const2)' 
    });
  }

  try {
    const token = await getAccessToken();
    const headers = { Authorization: `Zoho-oauthtoken ${token}` };

    // üîµ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if (type === 'registration') {
      const lead = await findLead(clickId, email, headers);

      if (lead) {
        const updateResp = await axios.put(
          'https://www.zohoapis.eu/crm/v2/Leads',
          {
            data: [{ id: lead.id, Lead_Status: 'Registered' }]
          },
          { headers }
        );
        return res.json({ success: true, updated: updateResp.data });
      } else {
        const createResp = await axios.post(
          'https://www.zohoapis.eu/crm/v2/Leads',
          {
            data: [{
              Last_Name: email || `Reg ${clickId}`,
              click_id_Alanbase: clickId,
              amount: amount || value || 0,
              Lead_Status: 'Registered',
              Currency: currency,
              type: 'registration',
              Email: email
            }]
          },
          { headers }
        );
        return res.json({ success: true, created: createResp.data });
      }
    }

    
// üü¢ –î–µ–ø–æ–∑–∏—Ç
if (type === 'deposit') {
  const contact = await findContact(clickId, email, headers);
  let deal = null;

  if (contact) {
    deal = await findDeal(contact.id, clickId, email, headers);

    if (!deal) {
      // –ö–æ–Ω—Ç–∞–∫—Ç –µ—Å—Ç—å, –Ω–æ —Å–¥–µ–ª–∫–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
      const dealResp = await axios.post(
        'https://www.zohoapis.eu/crm/v2/Deals',
        {
          data: [{
            Deal_Name: `Retention Deal ${contact.Last_Name || clickId}`,
            Stage: '0. FIRST DEPOSIT',
            Amount: Number(amount || value || 0),
            Currency: currency,
            Contact_Name: contact.id,
            Email: isValidEmail(email) ? email : undefined,
            click_id_Alanbase: clickId
          }]
        },
        { headers }
      );
      deal = { id: dealResp.data.data[0].details.id };
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª–µ ftd
    let isFirstDeposit = false;
    try {
      const dealDetails = await axios.get(`https://www.zohoapis.eu/crm/v2/Deals/${deal.id}`, { headers });
      isFirstDeposit = !dealDetails.data.data[0]?.ftd;
    } catch (e) {
      console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ ftd');
    }

    const depositData = {
      Name: `–î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${amount || value}`,
      amount: Number(amount || value),
      contact: contact.id,
      Retention: deal.id,
      Currency: currency,
      Email: isValidEmail(email) ? email : undefined
    };
    if (isFirstDeposit) depositData.Description = 'FTD';

    const depositResp = await axios.post(
      'https://www.zohoapis.eu/crm/v2/deposits',
      { data: [depositData] },
      { headers }
    );

    return res.json({ success: true, contactId: contact.id, dealId: deal.id, deposit: depositResp.data });
  }

  // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç ‚Äî –∏—â–µ–º –ª–∏–¥
  const lead = await findLead(clickId, email, headers);
  if (!lead) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∏ –ª–∏–¥ –ø–æ click_id/email');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞
  await axios.put(
    'https://www.zohoapis.eu/crm/v2/Leads',
    {
      data: [{ id: lead.id, Status: 'FTD' }]
    },
    { headers }
  );

  const contactName = generateContactName(lead, clickId);

  const contactResp = await axios.post(
    'https://www.zohoapis.eu/crm/v2/Contacts',
    {
      data: [{
        Last_Name: contactName,
        Email: isValidEmail(lead.Email) ? lead.Email : undefined,
        First_Name: lead.First_Name,
        click_id_Alanbase: clickId
      }]
    },
    { headers }
  );
  const contactId = contactResp.data.data[0]?.details?.id;

  const dealResp = await axios.post(
    'https://www.zohoapis.eu/crm/v2/Deals',
    {
      data: [{
        Deal_Name: `Retention Deal ${contactName}`,
        Stage: '0. FIRST DEPOSIT',
        Amount: Number(amount || value || 0),
        Currency: currency,
        Contact_Name: contactId,
        Email: isValidEmail(lead.Email) ? lead.Email : undefined,
        click_id_Alanbase: clickId
      }]
    },
    { headers }
  );
  const dealId = dealResp.data.data[0]?.details?.id;

  const depositResp = await axios.post(
    'https://www.zohoapis.eu/crm/v2/deposits',
    {
      data: [{
        Name: `–î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${amount || value}`,
        amount: Number(amount || value),
        contact: contactId,
        Retention: dealId,
        lead: lead.id,
        Currency: currency,
        Email: isValidEmail(lead.Email) ? lead.Email : undefined,
        Description: 'FTD'
      }]
    },
    { headers }
  );

  return res.json({
    success: true,
    createdContact: contactId,
    createdDeal: dealId,
    deposit: depositResp.data
  });
}

// üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    if (type === 'redeposit') {
      // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ click_id –∏–ª–∏ email
      const contact = await findContact(clickId, email, headers);
      if (!contact) {
        throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ click_id, –Ω–∏ –ø–æ email');
      }

      // –ò—â–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const deal = await findDeal(contact.id, clickId, email, headers);
      if (!deal) {
        throw new Error('Retention-—Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
      }

      const depositResp = await axios.post(
        'https://www.zohoapis.eu/crm/v2/deposits',
        {
          data: [{
            Name: `–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${amount || value}`,
            amount: amount || value,
            contact: contact.id,
            Retention: deal.id,
            Currency: currency,
            Email: email
          }]
        },
        { headers }
      );

      return res.json({ success: true, deposit: depositResp.data });
    }

    // üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    if (type === 'withdrawal') {
      // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ click_id –∏–ª–∏ email
      const contact = await findContact(clickId, email, headers);
      if (!contact) {
        throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ click_id, –Ω–∏ –ø–æ email');
      }

      // –ò—â–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const deal = await findDeal(contact.id, clickId, email, headers);
      if (!deal) {
        throw new Error('Retention-—Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
      }

      const withdrawalResp = await axios.post(
        'https://www.zohoapis.eu/crm/v2/withdrawals',
        {
          data: [{
            Name: `–í—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É ${amount || value}`,
            amount: amount || value,
            contact: contact.id,
            Retention: deal.id,
            Currency: currency,
            Email: email
          }]
        },
        { headers }
      );

      return res.json({ success: true, withdrawal: withdrawalResp.data });
    }

    // ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
    return res.status(400).json({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error?.response?.data || error.message);
    return res.status(500).json({ 
      success: false, 
      error: error?.response?.data || error.message,
      details: error.message 
    });
  }
});

app.listen(port, () => {
  console.log(`‚úÖ Server running on port ${port}`);
});
