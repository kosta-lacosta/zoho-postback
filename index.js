import express from 'express';
import axios from 'axios';

const app = express();
const port = process.env.PORT || 3000;

// –ü–æ–ª—É—á–µ–Ω–∏–µ Zoho access_token
async function getAccessToken() {
  try {
    const params = new URLSearchParams();
    params.append('client_id', '1000.PMKVL76WC40TDI4LS9Q0MOCRGIPE0A');
    params.append('client_secret', '225bac66c839b4b48df2c5b63552bc6e37108f76bb');
    params.append('grant_type', 'refresh_token');
    params.append('refresh_token', '1000.533a83031fea26bb4d0470e51f023930.ff8ded7294143ff9f17ff71c9c740dae');

    const response = await axios.post(
      'https://accounts.zoho.eu/oauth/v2/token',
      params.toString(),
      {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      }
    );

    return response.data.access_token;
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + (error?.response?.data?.error || error.message));
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–∞ –ø–æ click_id –∏–ª–∏ email
async function findLead(clickId, email, headers) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ click_id
    if (clickId) {
      const leadResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Leads/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (leadResp.data?.data?.[0]) {
        return leadResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ click_id, –∏—â–µ–º –ø–æ email
    if (email) {
      const leadResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Leads/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (leadResp.data?.data?.[0]) {
        return leadResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–∞:', error?.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ click_id –∏–ª–∏ email
async function findContact(clickId, email, headers) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ click_id
    if (clickId) {
      const contactResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Contacts/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (contactResp.data?.data?.[0]) {
        return contactResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ click_id, –∏—â–µ–º –ø–æ email
    if (email) {
      const contactResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Contacts/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (contactResp.data?.data?.[0]) {
        return contactResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error?.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –∏–ª–∏ –ª–∏–¥—É
async function findDeal(contactId, clickId, email, headers) {
  try {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –∏—â–µ–º –ø–æ Contact_Name
    if (contactId) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(Contact_Name:equals:${contactId})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∏—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ click_id
    if (clickId) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(click_id_Alanbase:equals:${clickId})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    // –ï—Å–ª–∏ –∏ –ø–æ click_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ø–æ email
    if (email) {
      const dealResp = await axios.get(
        `https://www.zohoapis.eu/crm/v2/Deals/search?criteria=(Email:equals:${email})`,
        { headers }
      );
      if (dealResp.data?.data?.[0]) {
        return dealResp.data.data[0];
      }
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏:', error?.response?.data || error.message);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Alanbase –ø–æ—Å—Ç–±—ç–∫–æ–≤
app.get('/api/alanbase', async (req, res) => {
  const {
    id,
    status,
    value,
    amount,
    goal,
    currency,
    custom1,
    const2,
    sub_id1,
    type: rawType
  } = req.query;

  const clickId = id || custom1 || sub_id1;
  const email = const2;
  const typeMap = {
    reg: 'registration',
    dep: 'deposit',
    red: 'redeposit',
    wd: 'withdrawal'
  };

  const type = typeMap[rawType || goal] || 'unknown';

  if (!clickId && !email) {
    return res.status(400).json({ 
      success: false, 
      error: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –ª–∏–±–æ click_id (id/custom1/sub_id1), –ª–∏–±–æ email (const2)' 
    });
  }

  try {
    const token = await getAccessToken();
    const headers = { Authorization: `Zoho-oauthtoken ${token}` };

    // üîµ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if (type === 'registration') {
      const lead = await findLead(clickId, email, headers);

      if (lead) {
        const updateResp = await axios.put(
          'https://www.zohoapis.eu/crm/v2/Leads',
          {
            data: [{ id: lead.id, Lead_Status: 'Registered' }]
          },
          { headers }
        );
        return res.json({ success: true, updated: updateResp.data });
      } else {
        const createResp = await axios.post(
          'https://www.zohoapis.eu/crm/v2/Leads',
          {
            data: [{
              Last_Name: email || `Reg ${clickId}`,
              click_id_Alanbase: clickId,
              amount: amount || value || 0,
              Lead_Status: 'Registered',
              Currency: currency,
              type: 'registration',
              Email: email
            }]
          },
          { headers }
        );
        return res.json({ success: true, created: createResp.data });
      }
    }

    // üü¢ –î–µ–ø–æ–∑–∏—Ç
    if (type === 'deposit') {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–∏–¥ –ø–æ click_id –∏–ª–∏ email
      const lead = await findLead(clickId, email, headers);
      
      if (lead) {
        // –ï—Å–ª–∏ –ª–∏–¥ –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—Ç–∞–¥–∏—é FTD
        await axios.put(
          'https://www.zohoapis.eu/crm/v2/Leads',
          {
            data: [{ id: lead.id, Lead_Status: 'FTD' }]
          },
          { headers }
        );
        
        // –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –õ–ò–î –í –ö–û–ù–¢–ê–ö–¢ –ò –°–î–ï–õ–ö–£
        const convertResp = await axios.post(
          `https://www.zohoapis.eu/crm/v2/Leads/${lead.id}/actions/convert`,
          {
            data: [{
              overwrite: true,
              notify_lead_owner: false,
              notify_new_entity_owner: false,
              Contacts: {
                Last_Name: lead.Last_Name || lead.Email || `Contact ${clickId}`,
                Email: lead.Email,
                click_id_Alanbase: lead.click_id_Alanbase || clickId
              },
              Deals: {
                Deal_Name: `Retention Deal for ${lead.Last_Name || lead.Email || clickId}`,
                Stage: 'Qualification',
                click_id_Alanbase: lead.click_id_Alanbase || clickId,
                Email: lead.Email
              }
            }]
          },
          { headers }
        );

        console.log('Convert API Response:', JSON.stringify(convertResp.data, null, 2));

        if (!convertResp.data?.data?.[0]) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–¥ - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
        }

        const convertedData = convertResp.data.data[0];
        console.log('Converted data structure:', JSON.stringify(convertedData, null, 2));
        
        let contactId, retentionId;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        if (convertedData.details) {
          // –í–∞—Ä–∏–∞–Ω—Ç 1: –¥–∞–Ω–Ω—ã–µ –≤ details
          contactId = convertedData.details.Contacts?.id || convertedData.details.Contacts;
          retentionId = convertedData.details.Deals?.id || convertedData.details.Deals;
        } else if (convertedData.Contacts || convertedData.Deals) {
          // –í–∞—Ä–∏–∞–Ω—Ç 2: –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
          contactId = convertedData.Contacts?.id || convertedData.Contacts;
          retentionId = convertedData.Deals?.id || convertedData.Deals;
        } else if (convertedData.message && convertedData.message === 'success') {
          // –í–∞—Ä–∏–∞–Ω—Ç 3: —É—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, –Ω–æ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
          console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏...');
          
          // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ email –∏–ª–∏ click_id
          const createdContact = await findContact(clickId, email, headers);
          if (createdContact) {
            contactId = createdContact.id;
            console.log('–ù–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:', contactId);
          }
          
          // –ò—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
          if (contactId) {
            const createdDeal = await findDeal(contactId, clickId, email, headers);
            if (createdDeal) {
              retentionId = createdDeal.id;
              console.log('–ù–∞–π–¥–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞:', retentionId);
            }
          }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ ID, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Ö –≤—Ä—É—á–Ω—É—é
        if (!contactId || !retentionId) {
          console.log('–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Ä—É—á–Ω—É—é...');
          
          if (!contactId) {
            const contact = await findContact(clickId, email, headers);
            if (contact) {
              contactId = contact.id;
              console.log('–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é:', contactId);
            }
          }
          
          if (!retentionId && contactId) {
            const deal = await findDeal(contactId, clickId, email, headers);
            if (deal) {
              retentionId = deal.id;
              console.log('–ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –≤—Ä—É—á–Ω—É—é:', retentionId);
            }
          }
        }

        if (!contactId || !retentionId) {
          console.error('–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', JSON.stringify(convertResp.data, null, 2));
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
        }
        
        console.log('–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', {
          leadId: lead.id,
          contactId,
          dealId: retentionId
        });

        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
        const depositResp = await axios.post(
          'https://www.zohoapis.eu/crm/v2/deposits',
          {
            data: [{
              Name: `–î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${amount || value}`,
              amount: amount || value,
              contact: contactId,
              field1: lead.id,
              Retention: retentionId,
              Currency: currency,
              Email: email
            }]
          },
          { headers }
        );

        return res.json({ 
          success: true, 
          leadUpdated: true,
          converted: true,
          deposit: depositResp.data 
        });
      } else {
        // –ï—Å–ª–∏ –ª–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É
        const contact = await findContact(clickId, email, headers);
        if (!contact) {
          throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ª–∏–¥, –Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ click_id –∏–ª–∏ email');
        }

        // –ò—â–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        const deal = await findDeal(contact.id, clickId, email, headers);
        if (!deal) {
          throw new Error('Retention-—Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
        }

        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
        const depositResp = await axios.post(
          'https://www.zohoapis.eu/crm/v2/deposits',
          {
            data: [{
              Name: `–î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${amount || value}`,
              amount: amount || value,
              contact: contact.id,
              Retention: deal.id,
              Currency: currency,
              Email: email
            }]
          },
          { headers }
        );

        return res.json({ 
          success: true, 
          deposit: depositResp.data 
        });
      }
    }

    // üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    if (type === 'redeposit') {
      // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ click_id –∏–ª–∏ email
      const contact = await findContact(clickId, email, headers);
      if (!contact) {
        throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ click_id, –Ω–∏ –ø–æ email');
      }

      // –ò—â–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const deal = await findDeal(contact.id, clickId, email, headers);
      if (!deal) {
        throw new Error('Retention-—Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
      }

      const depositResp = await axios.post(
        'https://www.zohoapis.eu/crm/v2/deposits',
        {
          data: [{
            Name: `–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${amount || value}`,
            amount: amount || value,
            contact: contact.id,
            Retention: deal.id,
            Currency: currency,
            Email: email
          }]
        },
        { headers }
      );

      return res.json({ success: true, deposit: depositResp.data });
    }

    // üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    if (type === 'withdrawal') {
      // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ click_id –∏–ª–∏ email
      const contact = await findContact(clickId, email, headers);
      if (!contact) {
        throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ click_id, –Ω–∏ –ø–æ email');
      }

      // –ò—â–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const deal = await findDeal(contact.id, clickId, email, headers);
      if (!deal) {
        throw new Error('Retention-—Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
      }

      const withdrawalResp = await axios.post(
        'https://www.zohoapis.eu/crm/v2/withdrawals',
        {
          data: [{
            Name: `–í—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É ${amount || value}`,
            amount: amount || value,
            contact: contact.id,
            Retention: deal.id,
            Currency: currency,
            Email: email
          }]
        },
        { headers }
      );

      return res.json({ success: true, withdrawal: withdrawalResp.data });
    }

    // ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
    res.status(400).json({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error?.response?.data || error.message);
    res.status(500).json({ 
      success: false, 
      error: error?.response?.data || error.message,
      details: error.message 
    });
  }
});

app.listen(port, () => {
  console.log(`‚úÖ Server running on port ${port}`);
});
